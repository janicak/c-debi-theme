{"version":3,"sources":["webpack:///./src/Shortcodes/MC4WPGridform/index.js","webpack:///./src/common_assets/lib/gridforms/gridforms.js","webpack:///./node_modules/@wpackio/entrypoint/lib/index.js"],"names":["$","GridForms","window","jQuery","el","fieldsRows","fieldsContainers","focusableFields","init","this","focusField","filter","equalizeFieldHeights","events","currentField","closest","addClass","removeFieldFocus","removeClass","that","click","event","selector","target","is","find","first","focus","blur","resize","css","areFieldsStacked","each","fieldRow","rowHeight","rowInputs","children","textAreas","length","firstRow","not","totalWidth","width","path","replace","concat"],"mappings":";;;;;;;;;;;;;;;;;+JAAA,6B,kBCuBA,IAAUA,EACFC,EADED,EAkFPE,OAAOC,QAjFFF,EAAY,CACZG,GAAI,CACAC,WAAYL,EAAE,mBACdM,iBAAkBN,EAAE,qBACpBO,gBAAiBP,EAAE,0BAA2B,qBAC9CE,OAAQF,EAAEE,SAEdM,KAAM,WACFC,KAAKC,WAAWD,KAAKL,GAAGG,gBAAgBI,OAAO,WAC/CF,KAAKG,uBACLH,KAAKI,UAETH,WAAY,SAASI,GACjBA,EAAaC,QAAQ,qBAAqBC,SAAS,UAEvDC,iBAAkB,WACdR,KAAKL,GAAGE,iBAAiBY,YAAY,UAEzCL,OAAQ,WACJ,IAAIM,EAAOV,KACXU,EAAKf,GAAGE,iBAAiBc,OAAM,SAASC,GACpC,IAAId,EAAkBY,EAAKf,GAAGG,gBAAgBe,SAEzCtB,EAAEqB,EAAME,QAAQC,GAAGjB,IACpBP,EAAES,MAAMgB,KAAK,wCAAwCC,QAAQC,WAGrER,EAAKf,GAAGG,gBAAgBoB,OAAM,WAC1BR,EAAKT,WAAWV,EAAES,UAEtBU,EAAKf,GAAGG,gBAAgBqB,MAAK,WACzBT,EAAKF,sBAETE,EAAKf,GAAGF,OAAO2B,QAAO,WAClBV,EAAKP,2BAIbA,qBAAsB,WAClBH,KAAKL,GAAGE,iBAAiBwB,IAAI,SAAU,QAEvC,IAAIzB,EAAaI,KAAKL,GAAGC,WACrBC,EAAmBG,KAAKL,GAAGE,iBAG1BG,KAAKsB,oBACN1B,EAAW2B,MAAK,WAEZ,IAAIC,EAAWjC,EAAES,MACbyB,EAAYD,EAASH,IAAI,UAGzBK,EAAYF,EAASG,WACrBC,EAAYF,EAAUC,SAAS,YACV,IAArBD,EAAUG,QAAqC,IAArBD,EAAUC,QAGxCL,EAASR,KAAKnB,GAAkBwB,IAAI,SAAUI,OAI1DH,iBAAkB,WAGd,IAAIQ,EAAW9B,KAAKL,GAAGC,WAClBmC,IAAI,uBACJd,QAIDe,EAAa,EAMjB,OALAF,EAASH,WAAWJ,MAAK,WACrBS,GAAczC,EAAES,MAAMiC,WAInBH,EAASG,SAAWD,KAGzBjC,OACVN,OAAOD,UAAYA,G,8DC/FP,IAAI0C,EAAK,iBAA6CC,QAAQ,kBAAkB,IAChG,IAAwB1C,OAAO,YAAY2C,OAAOF,M","file":"app/shortcode_mc4wp_gridform-55e22721.js","sourcesContent":["import '../../common_assets/lib/gridforms/gridforms'\r\nimport '../../common_assets/lib/gridforms/gridforms.css'\r\nimport './index.scss'","//\n//  Grid Forms\n//  Copyright (c) 2013 Kumail Hunaid\n//\n//  Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the \"Software\"), to deal\n//  in the Software without restriction, including without limitation the rights\n//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//  copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n//  The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n//\n\n(function($) {\n    var GridForms = {\n        el: {\n            fieldsRows: $('[data-row-span]'),\n            fieldsContainers: $('[data-field-span]'),\n            focusableFields: $('input, textarea, select', '[data-field-span]'),\n            window: $(window)\n        },\n        init: function() {\n            this.focusField(this.el.focusableFields.filter(':focus'));\n            this.equalizeFieldHeights();\n            this.events();\n        },\n        focusField: function(currentField) {\n            currentField.closest('[data-field-span]').addClass('focus');\n        },\n        removeFieldFocus: function() {\n            this.el.fieldsContainers.removeClass('focus');\n        },\n        events: function() {\n            var that = this;\n            that.el.fieldsContainers.click(function(event) {\n                var focusableFields = that.el.focusableFields.selector;\n                \n                if (!$(event.target).is(focusableFields)) {\n                    $(this).find('input[type=\"text\"], textarea, select').first().focus();\n                }\n            });\n            that.el.focusableFields.focus(function() {\n                that.focusField($(this));\n            });\n            that.el.focusableFields.blur(function() {\n                that.removeFieldFocus();\n            });\n            that.el.window.resize(function() {\n                that.equalizeFieldHeights();\n            });\n\n        },\n        equalizeFieldHeights: function() {\n            this.el.fieldsContainers.css(\"height\", \"auto\");\n\n            var fieldsRows = this.el.fieldsRows;\n            var fieldsContainers = this.el.fieldsContainers;\n\n            // Make sure that the fields aren't stacked\n            if (!this.areFieldsStacked()) {\n                fieldsRows.each(function() {\n                    // Get the height of the row (thus the tallest element's height)\n                    var fieldRow = $(this);\n                    var rowHeight = fieldRow.css('height');\n                    \n                    // Singleton textarea rows should determine their row height\n                    var rowInputs = fieldRow.children();\n                    var textAreas = rowInputs.children(\"textarea\");\n                    if (rowInputs.length === 1 && textAreas.length === 1) return;\n\n                    // Set the height for each field in the row...\n                    fieldRow.find(fieldsContainers).css('height', rowHeight);\n                });\n            }\n        },\n        areFieldsStacked: function() {\n            // Get the first row \n            // which does not only contain one field \n            var firstRow = this.el.fieldsRows\n                .not('[data-row-span=\"1\"]')\n                .first();\n\n            // Get to the total width \n            // of each field witin the row\n            var totalWidth = 0;\n            firstRow.children().each(function() {\n                totalWidth += $(this).width();\n            });\n\n            // Determine whether fields are stacked or not\n            return firstRow.width() <= totalWidth;\n        }\n    };\n    GridForms.init();\n    window.GridForms = GridForms;\n})(window.jQuery);\n","/* eslint-disable camelcase */ /* eslint-disable babel/camelcase */ /* eslint-disable no-underscore-dangle */ // eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n/* global __webpack_public_path__ */ // eslint-disable-next-line spaced-comment\n///<reference types=\"webpack-env\" />\n// We expect __webpack_public_path__ to be present, thanks to webpack\n// We are not using DOM in the typescript library, so let's just hack our way\n// through window\n// tslint:disable-next-line:no-any\n// We would override __webpack_public_path__ only if __WPACKIO__ webpack plugin is set\nif(__WPACKIO__){var path=(__WPACKIO__.appName+__WPACKIO__.outputPath).replace(/[^a-zA-Z0-9_-]/g,'');// eslint-disable-next-line no-global-assign\n__webpack_public_path__=window[\"__wpackIo\".concat(path)];}"],"sourceRoot":""}